// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: core/worker/protos/worker.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkerGRPC_StreamWorker_FullMethodName = "/worker.WorkerGRPC/StreamWorker"
)

// WorkerGRPCClient is the client API for WorkerGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerGRPCClient interface {
	StreamWorker(ctx context.Context, opts ...grpc.CallOption) (WorkerGRPC_StreamWorkerClient, error)
}

type workerGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerGRPCClient(cc grpc.ClientConnInterface) WorkerGRPCClient {
	return &workerGRPCClient{cc}
}

func (c *workerGRPCClient) StreamWorker(ctx context.Context, opts ...grpc.CallOption) (WorkerGRPC_StreamWorkerClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkerGRPC_ServiceDesc.Streams[0], WorkerGRPC_StreamWorker_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &workerGRPCStreamWorkerClient{stream}
	return x, nil
}

type WorkerGRPC_StreamWorkerClient interface {
	Send(*WorkerResStruct) error
	Recv() (*WorkerReqStruct, error)
	grpc.ClientStream
}

type workerGRPCStreamWorkerClient struct {
	grpc.ClientStream
}

func (x *workerGRPCStreamWorkerClient) Send(m *WorkerResStruct) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerGRPCStreamWorkerClient) Recv() (*WorkerReqStruct, error) {
	m := new(WorkerReqStruct)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerGRPCServer is the server API for WorkerGRPC service.
// All implementations must embed UnimplementedWorkerGRPCServer
// for forward compatibility
type WorkerGRPCServer interface {
	StreamWorker(WorkerGRPC_StreamWorkerServer) error
	mustEmbedUnimplementedWorkerGRPCServer()
}

// UnimplementedWorkerGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerGRPCServer struct {
}

func (UnimplementedWorkerGRPCServer) StreamWorker(WorkerGRPC_StreamWorkerServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWorker not implemented")
}
func (UnimplementedWorkerGRPCServer) mustEmbedUnimplementedWorkerGRPCServer() {}

// UnsafeWorkerGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerGRPCServer will
// result in compilation errors.
type UnsafeWorkerGRPCServer interface {
	mustEmbedUnimplementedWorkerGRPCServer()
}

func RegisterWorkerGRPCServer(s grpc.ServiceRegistrar, srv WorkerGRPCServer) {
	s.RegisterService(&WorkerGRPC_ServiceDesc, srv)
}

func _WorkerGRPC_StreamWorker_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerGRPCServer).StreamWorker(&workerGRPCStreamWorkerServer{stream})
}

type WorkerGRPC_StreamWorkerServer interface {
	Send(*WorkerReqStruct) error
	Recv() (*WorkerResStruct, error)
	grpc.ServerStream
}

type workerGRPCStreamWorkerServer struct {
	grpc.ServerStream
}

func (x *workerGRPCStreamWorkerServer) Send(m *WorkerReqStruct) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerGRPCStreamWorkerServer) Recv() (*WorkerResStruct, error) {
	m := new(WorkerResStruct)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerGRPC_ServiceDesc is the grpc.ServiceDesc for WorkerGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.WorkerGRPC",
	HandlerType: (*WorkerGRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWorker",
			Handler:       _WorkerGRPC_StreamWorker_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "core/worker/protos/worker.proto",
}
